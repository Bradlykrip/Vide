var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"==typeof module&&"object"==typeof module.exports){var t=e(require,exports);void 0!==t&&(module.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","fs","process","./config","./index"],e)}(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scripts=t.Components=t.headers=void 0;const n=__importDefault(e("fs")),i=e("process"),o=e("./config"),l=e("./index"),r=e("chalk");console.log(`${r.blue("●")} building html`);const s=[];let a;const p={},d=[],c=[];l.Dom.forEach(e=>{const t={};l.$.forEach(m=>{if(Object.keys(m("Vide").get()[0].attribs).includes("script"))d.includes({js:m("Vide").text().trim().split("\n"),from:m.prototype.name})||(console.log(`${r.blue("   ●")} compiling JS script: ${m.prototype.name}`),d.push({js:m("Vide").text().trim().split("\n"),from:m.prototype.name}));else{e.get().forEach((e,t)=>{JSON.parse(JSON.stringify(e.attribs)),Object.keys(e.attribs);a=void 0===e.children[0]?{attribs:e.attribs,type:e.type,"tag-name":e.name,length:e.children.length}:{attribs:e.attribs,type:e.type,"tag-name":e.name,innerText:e.children[0].data,fullText:l.Clean.filter(t=>null!=t(`component[name=${e.attribs.name}]`).html())[0],length:e.children.length},s.push(a),"component"===a["tag-name"]&&(void 0===a.attribs.name&&(console.log(`${r.red("   ● ")}Expected name attribute instead got undefined`),i.exit()),void 0===a.attribs.type&&(console.log(`${r.red("   ● ")}Expected type attribute instead got undefined`),i.exit()),p[a.attribs.name]=a)});const d=m("Vide").get()[0].attribs;if(void 0!==d.name?t.name=m("Vide").get()[0].attribs.name:t.name="Vide app",void 0===o.config.outDir?n.default.existsSync(`./${m.prototype.name.split(".vide")[0]||"html"}.html`)&&n.default.unlinkSync(`./${m.prototype.name.split(".vide")[0]||"html"}.html`):n.default.existsSync(`${o.config.outDir}/${m.prototype.name.split(".vide")[0]||"html"}.html`)&&n.default.unlinkSync(`${o.config.outDir}/${m.prototype.name.split(".vide")[0]}.html`),Object.keys(d).includes("router"))c.includes(m.prototype.name)&&(console.log(`${r.blue("   ●")} skipping ${m.prototype.name} due to type being router`),c.push(m.prototype.name));else{m("Vide").get()[0].children.forEach(e=>{e.data=""}),m("Router").remove();const e=m("Vide component").remove().end().children().html().trim(),i=`\n<!DOCTYPE html>\n<html lang="en">\n<head>\n\t<meta charset="UTF-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>${t.name||"Vide app"}</title>\n    <link rel="stylesheet" href="css-${m.prototype.name.split(".vide")[0]}.css">\n</head>\n<body>\n${e}\n</body>\n</html>\n`;if("undefined/"===`${o.config.outDir}/`)n.default.appendFileSync(`./${m.prototype.name.split(".vide")[0]||"html"}.html`,i);else try{n.default.appendFileSync(`${o.config.outDir}/${m.prototype.name.split(".vide")[0]||"html"}.html`,i)}catch(e){console.log(`${r.red("●")} ${o.config.outDir}/ does not exist.`)}}}})}),t.headers=[],t.Components=p,t.scripts=d;e("./script-parser")});